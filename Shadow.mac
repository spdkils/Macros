#Turbo

|- This script expects you to execute it passing 2 parameters 1: Who the boss is, 2: Who to attack.
|- --------------------------------------------------------------${Param0}           ${Param1}
|- Example /mac simple ${Me.ID} ${Target.ID}
|- If you want to use this via eqbc then it could look like this. /bct Eemo //mac simple ${Me.ID} ${Target.ID}
|- Eemo will get this as a command.  /mac simple 534 292 (Just example numbers, depends on target, and zone)


Sub Main(int intCommander, int intBadGuy)
	/echo Beast Assist
	/declare aids bool outer true
	/declare myTarget int local ${intBadGuy}
	/declare maxRange int local
	/varcalc maxRange ${Me.MaxRange}-1
	/target id ${myTarget}
	:WAITFORTARGET
		/delay 1
	/if (${Target.ID} != ${myTarget} && ${Spawn[id ${myTarget}].ID} && !${Spawn[id ${myTarget}].Dead}) /goto :WAITFORTARGET
	/if (!${Target.ID}) /return
	/face fast
	/if (${Spawn[id ${myTarget}].LineOfSight} && ${Spawn[id ${myTarget}].Distance} < 100) /stick ${maxRange} id ${myTarget} loose
	/if (${Target.Type.Equal[PC]}) {
		/attack off
		/return
	 }
	/bc Attacking ${Target.Name}
	/pet attack
	/declare caster bool local ${Target.Class.PureCaster}
	/if (!${caster}) /varset caster ${Target.Class.PetClass}
	:TOP
		/call SpotHeal 30 99
		/target id ${myTarget}
		/if (${Me.PctHPs} > 30) /varset aids true
		/attack on
		/doevents
		/face fast id ${myTarget}
		/if (${Me.Combat} && (${Me.TargetOfTarget.Name.Equal[Anastasia]} || ${Me.TargetOfTarget.Name.Equal[Lyft]}) && ${Me.SpellReady[Flash of Light]} && ${SpellTimer[${myTarget},Flash of Light]} < 4) /casting "Flash of Light" -targetid|${myTarget}
		/if (${Target.Type.Equal[NPC]}) {
			/if (${Target.Distance}<15 && ${Me.CombatState.Equal[Combat]} && ${Me.AbilityReady[Kick]}) /doability "Kick"
		}
		/if (${Me.PctHPs} < 31) {
			/if (${aids}) {
					/vgroup 007
					/bc BAD NEWS!
				}
			/varset aids false
		}
		
		/delay 1
		/if (!${Spawn[id ${myTarget}].Dead} && ${Spawn[id ${myTarget}].ID}) /GOTO :TOP
	/attack off
	/stick 7 id ${intCommander} loose
/return

Sub SpotHeal(int intHealThreshold, int intSpellRange)
	/declare intLoop int local 0
	/declare intPctHPs int local 100
	/declare intTargetID int local 0
	/declare strHealSpell string local "Healing"
	| Check group health
	/for intLoop 0 to ${Group}
		/if (${Group.Member[${intLoop}].PctHPs} && ${Group.Member[${intLoop}].PctHPs} < ${intPctHPs}) {
			/varset intPctHPs ${Group.Member[${intLoop}].PctHPs}
			/varset intTargetID ${Group.Member[${intLoop}].ID}
		}
	/next intLoop
	| Check to see if they are in range, and meet the threshold for a heal.}
	/if (${Spawn[id ${intTargetID}].Distance} < ${intSpellRange} && ${intPctHPs} <= ${intHealThreshold} && ${Me.CurrentMana} > ${Spell[${strHealSpell}].Mana}) {
		/delay 3s ${Me.SpellReady[${strHealSpell}]}
		/if (${Me.SpellReady[${strHealSpell}]}) {
			/gsay Casting ${strHealSpell} on ${Spawn[id ${intTargetID}].Name}
			/casting ${strHealSpell} -targetid|${intTargetID}
			/delay 12s !${Me.Casting.ID}
			/call SpotHeal 30 100
		}
	}
/return
