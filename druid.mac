#TURBO
|-----------------
|- Built this for Lyft (Druid)
|-
|-----------------
|- Requires MQ2Cast & MQ2CastTimer


Sub Main(int intCommander, int intBadGuy)
	/call SpotHeal 70 99
	/if (${Me.Sitting} && ${Me.PctMana} < 90 && ${Me.CombatState.Equal[resting]}) /return
	/stick off
	:targetwait
		/if (!${Spawn[id ${intBadGuy}].ID}) /return
		/target id ${intBadGuy}
		/delay 1
	/if (${Target.ID} != ${intBadGuy}) /GOTO :targetwait
	/if (${Target.Type.Equal[PC]}) {
		/attack off
		/call SpotHeal 70 100
		/stick 7 id ${intCommander} loose
		/return
	 }
	/pet attack
	/delay 3s
	/pet attack
	/face fast
	/stick id ${intBadGuy} 100 healer
	/declare BAD[2] string outer NULL
	/varset BAD[1] "Ensnare"
	/varset BAD[2] "Drones of Doom"
	/declare GOOD[1] string outer NULL
	/declare loop int inner 0
	:TOP
		|- Bad spells on target macro was run on
		/if (${Me.PctMana} > 20 && ${Spawn[id ${intBadGuy}].PctHPs} > 20 && ${Spawn[id ${intBadGuy}].Dead} == FALSE && ${Spawn[id ${intBadGuy}].Type.Equal[NPC]}) {
			/for loop 1 to ${BAD.Size}
				/call SpotHeal 70 100
				|     Life  %--^  ^---Range
				/delay 3s ${Me.SpellReady[${BAD[${loop}]}]}
				/if (${Me.CurrentMana} > ${Spell[${BAD[${loop}]}].Mana} && ${Me.SpellReady[${BAD[${loop}]}]} && ${SpellTimer[${intBadGuy},${BAD[${loop}]}]}<3) /casting ${BAD[${loop}]} -targetid|${intBadGuy}
			/next loop
		}
		/if (${Me.CombatState.Equal[Combat]}) {
			/for loop 1 to ${GOOD.Size}
				/delay 2s ${Me.SpellReady[${GOOD[${loop}]}]}
				/if (${Me.CurrentMana} > ${Spell[${GOOD[${loop}]}].Mana} && ${Me.SpellReady[${GOOD[${loop}]}]} && ${SpellTimer[${Me.ID},${GOOD[${loop}]}]}<20) /casting ${GOOD[${loop}]} -targetid|${Me.ID}
			/next loop
		}
		/call SpotHeal 70 100
		|     Life  %--^  ^---Range
		/delay 1
		/if (!${Me.TargetOfTarget.Name.Equal[${Me.Name}]} && !${Me.Sitting} && ${Me.PctMana} < 90 && !${Me.Casting.ID} && ${Spawn[id ${intBadGuy}].Distance} > ${Spawn[id ${intBadGuy}].MaxRange}) /sit
	/if (${Spawn[id ${intBadGuy}].ID} && !${Spawn[id ${intBadGuy}].Dead}) /GOTO :TOP
	:ENDING
	/echo ENDING MACRO
	/attack off
	/stick 7 id ${intCommander} loose
/return


Sub SpotHeal(int intHealThreshold, int intSpellRange)
	/declare intLoop int local 0
	/declare intPctHPs int local 100
	/declare intTargetID int local 0
	/declare strHealSpell string local "Greater Healing"
	| Check group health
	/for intLoop 0 to ${Group}
		/if (${Group.Member[${intLoop}].PctHPs} && ${Group.Member[${intLoop}].PctHPs} < ${intPctHPs}) {
			/varset intPctHPs ${Group.Member[${intLoop}].PctHPs}
			/varset intTargetID ${Group.Member[${intLoop}].ID}
		}
	/next intLoop
	| Check to see if they are in range, and meet the threshold for a heal.}
	/if (${Spawn[id ${intTargetID}].Distance} < ${intSpellRange} && ${intPctHPs} <= ${intHealThreshold} && ${Me.CurrentMana} > ${Spell[${strHealSpell}].Mana}) {
		/delay 3s ${Me.SpellReady[${strHealSpell}]}
		/if (${Me.SpellReady[${strHealSpell}]}) {
			/gsay Casting ${strHealSpell} on ${Spawn[id ${intTargetID}].Name}
			/casting ${strHealSpell} -targetid|${intTargetID}
			/delay 12s !${Me.Casting.ID}
			/call SpotHeal 70 100
		}
	}
/return
